import { Injectable, Logger } from '@nestjs/common';
import { InjectDiscordClient, On, Once } from '@discord-nestjs/core';
import { Client, Message, TextChannel, Guild } from 'discord.js';

@Injectable()
export class BotGateway {
  private readonly logger = new Logger(BotGateway.name);

  constructor(
    @InjectDiscordClient()
    private readonly client: Client,
  ) {}

  @Once('ready')
  onReady() {
    if (this.client.user) {
      this.logger.log(`Bot ${this.client.user.tag} was started!`);

      // Obtener la primera guild (servidor) donde est√° el bot
      const guild: Guild | undefined = this.client.guilds.cache.first();

      if (!guild) {
        this.logger.warn('El bot no est√° en ning√∫n servidor.');
        return;
      }

      const channel = guild.channels.cache
        .filter(
          (c) =>
            c.isTextBased() &&
            (c as TextChannel)
              .permissionsFor(this.client.user!)
              ?.has('SendMessages'),
        )
        .first() as TextChannel | undefined;

      if (channel) {
        console.log('Anata ga watashi no Master ka?');
      } else {
        this.logger.warn('No se encontr√≥ ning√∫n canal de texto disponible.');
      }
    } else {
      this.logger.log('Bot was started, but user is null.');
    }
  }

  @On('messageCreate')
  async onMessage(message: Message) {
    if (message.author.bot) return;

    if (message.content === '!ping') {
      await message.reply('üèì Pong!');
    }

    if (message.content === '!hola') {
      await message.reply(this.getRandomSaberGreeting());
    }

    if (message.content === '!saber') {
      await message.reply(this.getRandomSaberMessage());
    }
  }

  /**
   * Retorna un saludo aleatorio de Saber.
   * @returns {string} Un mensaje de saludo seleccionado al azar.
   */
  private getRandomSaberGreeting(): string {
    const greetings: string[] = [
      'Saludos, Maestro. ¬øNecesitas de mi espada?',
      'Buenos d√≠as. Espero que est√©s listo para enfrentar cualquier desaf√≠o.',
      'Hola. Mientras permanezcamos juntos, la victoria ser√° nuestra.',
      'Es un honor verte nuevamente. ¬øCu√°l es nuestro pr√≥ximo movimiento?',
      'Maestro, conf√≠o en que has descansado bien. La batalla nos espera.',
    ];

    return greetings[Math.floor(Math.random() * greetings.length)];
  }

  /**
   * Retorna un mensaje aleatorio de Saber.
   * @returns {string} Un mensaje de mensaje seleccionado al azar.
   */
  private getRandomSaberMessage(): string {
    const greetings: string[] = [
      'La justicia no se obtiene con palabras, sino con acci√≥n. Sigamos adelante.',
      'Siempre estar√© a tu lado, como lo estuve en tiempos de Camelot.',
      'No importa cu√°ntos enemigos enfrentemos, mi espada nunca vacilar√°.',
      'Recuerda, Excalibur solo brilla con su m√°ximo esplendor cuando se lucha por un ideal verdadero.',
      'He enfrentado muchas batallas, pero el destino de esta guerra est√° en tus manos.',
      'Aunque Gilgamesh se crea invencible, su arrogancia ser√° su ca√≠da.',
      'Lancer es un oponente formidable, pero la lanza no vencer√° a la espada.',
      'Rider es noble en su propio camino, pero nuestra determinaci√≥n es m√°s fuerte.',
      'He visto el deseo de Emiya. Su convicci√≥n es admirable, aunque su camino sea tr√°gico.',
      'Kiritsugu‚Ä¶ Su m√©todo es despiadado, pero entiendo su dolor.',
      'Maestro, ten cuidado con Caster. Su magia no debe subestimarse.',
      'Berserker es un enemigo feroz, pero su rabia no le dar√° la victoria.',
      'He o√≠do de Ritsuka Fujimaru. Un Maestro con una voluntad digna de respeto.',
      'En esta era, el Rey de los H√©roes sigue siendo tan arrogante como siempre‚Ä¶',
      'Camelot ya no existe, pero su esp√≠ritu vive en aquellos que creen en la justicia.',
    ];

    return greetings[Math.floor(Math.random() * greetings.length)];
  }
}
